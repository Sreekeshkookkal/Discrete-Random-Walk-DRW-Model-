/***********************************************************************
UDF for implementing the Discrete Random Walk model
The Clarkson University
Aerosol and Intrumentation Lab
Mechanical & Aerospace Engg
Author: Sreekesh Kookkal
Advisor: Dr. Suresh Dhaniyala
May 2022
This udf works only in k-eps turbulence model
************************************************************************/
#include "udf.h"
#include "dpm.h"
#include "mem.h"
#include "sg.h"
#include "stdlib.h"
#include "stdio.h"
#include "math.h"
#include "cxsurf.h"
#include "random.h"
#include "metric.h"

        
/* Definitions */
#define PI 3.14159265358979323846
#define SMALL1 1.0e-19
#define GREAT 1.0e6
#define op_pressure 0.0

real T_time;
real Vprime[3];
real C_c;
real drag; /*defined drag force*/
real Vrel;
/*Global variables*/
enum udm_names
    {
        TAU_WALL,
        N_VEC_X=0,
        N_VEC_Y=0,
        N_VEC_Z=0
    };

/*******************************************************************************/
/*******************************************************************************/


/*********************************************************************************/
/********************************************************************************/
/*******************************************************************************/
    /* Drag Force calculation
    Instantanuous velocity fluctuation of the partilce is calculated 
/****************************************************************************/
/***************************************************************************/
/**************************************************************************/
DEFINE_DPM_DRAG(DRW_drag,Re,p)
{
        
        cphase_state_t *c = &(p->cphase[0]); /* pointer to continuous phase properties, velocity etc.(dpm.h) */

		cell_t c0 = RP_CELL(&(p->cCell)); /* index of cell in which currently tracked particle is in */

        Thread *t0 = RP_THREAD(&(p->cCell)); /* cell thread to which above cell belongs *


        /*real Vrel, drag_force, Rep, a1, a2, a3; Drag force variables */
        
    
        real Stk; /* Stokes number */

        real Y_plus_p; /* dimensionless particle dist. */


        real pp[3] = {0.0,0.0,0.0}; /* particle position vector */
        real pv[3] = {0.0,0.0,0.0}; /* particle velocity vector */
        real cv[3] = {0.0,0.0,0.0}; /* Cont. Phase velocity vector */
        real cv1[3] = {0.0,0.0,0.0}; /* Cont. Phase velocity vector */
        real cv2[3] = {0.0,0.0,0.0}; /* Cont. Phase velocity vector */
        real cv3[3] = {0.0,0.0,0.0}; /* Cont. Phase velocity vector */

        real I[3] = {0.0,0.0,0.0}; /* stream wise direction vector at particle location */
        real J[3] = {0.0,0.0,0.0}; /* wall normal vector */
        real K[3] = {0.0,0.0,0.0}; /* span wise direction vector */


        NV_V(pv, =, p->state.V); /* velocity of particle, x,y,z-coord. now stored in pv */
        NV_V(pp, =, p->state.pos); /* position of particle, x,y,z-coord. now stored in pp*/

        
        c->V[0] = C_U(c0,t0); /*x_vel*/
        c->V[1] = C_V(c0,t0); /*y_vel*/
        c->V[2] = C_W(c0,t0);
       
    

        real rhop, dp;
        real rho = C_R(c0,t0); /* Density of the fluid*/
        real mu = C_MU_L(c0,t0); /* Laminar Dynamic Viscosity of the fluid */
        real k = C_K(c0,t0); /* Turbulent Kinetic Energy */
        real eps = C_D(c0,t0); /* Turbulent Dissipation rate */



        /*****************************************************************************/
        /*****************************************************************************/
        /*real L_e = mu*(pow(k,1.5)/eps); /*Eddy length scale*/

        real L_e = 0.245*(pow(k,1.5)/eps);

        /*****************************************************************************/
        /*****************************************************************************/


		 real Vabs; /* Flow absolute velocity */ 

        int i;
        
        real Vprime_rms; /* rms of fluct. velocity in bulk region */
        real G_rand[3] = {0.0,0.0,0.0}; /* Guassian Random Variable */
        real G_rand1[3] = {0.0,0.0,0.0}; /* Guassian Random Variable */
        real G_rand2[3] = {0.0,0.0,0.0}; /* Guassian Random Variable */

        real Vprime_vec[3] = {0.0,0.0,0.0}; /* rms fluct. vel. vector */
        
        
        real vel_fric; /* frictional velocity */
        real tp, dt_factor; /* Because eddy lifetime is twice the Lagrangian time scale */
        real tlplus, Tau_L, Tau_p, cd, T_cross;
        real I_mag;
        real T_turb;
        



        for(i=0;i<3;i++)
        {
            pp[i] = P_POS(p)[i];
            pv[i] = P_VEL(p)[i];
        }

    /* Cont. Phase velocities */

        cv[0] = C_U(c0,t0); 
        cv[1] = C_V(c0,t0); 
        cv[2] = C_W(c0,t0);


        NV_V(pv, =, p->state.V); /* velocity of particle, x,y,z-coord. now stored in pv */
        NV_V(pp, =, p->state.pos); /* position of particle, x,y,z-coord. now stored in pp*/


        c->V[0] = C_U(c0,t0); 
        c->V[1] = C_V(c0,t0); 
        c->V[2] = C_W(c0,t0);

        
    /* Computing rms of fluctuating velocity*/
        Vprime_rms = sqrt(2*k/3);

        /* Particle Properties */
        dp = P_DIAM(p); /*Particle Diameter[m]*/
        rhop = P_RHO(p); /*Particle Density [kg/m^3]*/

		   /*calculating relative velocity*/
       
        Vrel = sqrt( pow(cv[0] - pv[0],2) + pow(cv[1] - pv[1],2)+ pow(cv[2] - pv[2],2));


/********************************************************************************/

        real pres = 0+(76.0/101325.0)*C_P(c0,t0);
	    C_c = 1+(2.0/(pres*dp*pow(10,6)))*(6.32+2.01*exp(-0.1095*pres*(dp*pow(10,6)))); 
 
 /********************************************************************************/



        Tau_p = (rhop*dp*dp*C_c)/(18*mu);

      
    /* Calculating tl_plus Lagrangian time scale*/

        Tau_L = (2.0*0.3)*(k/eps); 

    /*Particle Eddy crossing time*/
    real var1 = (1- L_e*(Tau_p*Vrel + SMALL1));  

    
        T_cross = -Tau_p*log(var1);
   
        /*T_turb = min(T_cross, Tau_L);*/

        T_turb = min(0.3*k/eps, 0.16432*pow(k, 1.5)/eps/(Vrel + SMALL1));

                
    /*Stokes number*/
        Stk = Tau_p/Tau_L;
        
/*****************************************************************************/
/*****************************************************************************/
        real dt = P_DT(p);
/*****************************************************************************/
/*****************************************************************************/
          if(dt < T_turb)
          {
            T_time = T_time+dt;
                       
            if(T_time > T_turb)
            {
                double values[3] = {0.0,0.0,0.0};

                T_time = 0.0;

                for(i=0;i<3;i++)
                    {
        	            G_rand[i] = dpm_gauss_random(p); /*Generating random number*/
                      Vprime[i] = Vprime_rms*G_rand[i];
                    }
            }
          }
        else
        {
            for(i=0;i<3;i++)
                {
        	       Vprime[i] = 0.0;
                   T_time = GREAT;
                }
               
        }

        for(i=0;i<2;i++)
            {
        	    cv1[i] = cv[i] + Vprime[i]; /* Adding fluctuating velocity to the mean continuous phase velocity */
                cv2[i] = cv1[i] - pv[i]; /* For calculating slip velocity */
            }
        
        
           
    /* Add calculated velocity to the domain*/

  
        for(i=0;i<2;i++)
        {
            p->state.V[i] = (pv[i] + P_DT(p)*cv1[i]/Tau_p)/(1 + P_DT(p)/Tau_p);
            p->state0.V[i] = p->state.V[i];
            c->V[i] += Vprime[i];
        }

/*************************************************
************************************************
            Drag force 
************************************************
*************************************************/
        real C_d;  /*defined drag coefficient*/
        real a1, b1, c1; /*defined constant for calculating drag coefficient*/
        real C_c1 = 1.0;

       
        Vrel = sqrt(pow((c->V[0] - pv[0]),2) + pow((c->V[1] - pv[1]),2)+ pow((c->V[2] - pv[2]),2));


        
        /*p->Re = (rho * dp * Vrel/mu);*/

        /*printf("Reynolds number =%g\n", p->Re);*/        
                     

                     
        if ( p->Re <= 1)
		 {
			 drag = 18.0/C_c;
			 return (drag);
		 }
		 else if (1 <  p->Re &&  p->Re <= 800)
		 {
			 drag = (18.0/C_c) * (1 + 0.15* pow( p->Re, 0.687));
			 return (drag);
		 }
		 else
			 
		 {
			 drag = (18.0 /C_c) * (1 + 0.158*pow( p->Re, 0.66667));
			 return (drag);
		 }
                

/*
                       
        if ( p->Re <= 0.01)
		{
			a1 = 0.1875;
			b1 = 24.0;
			c1 = 0.0;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d*Re/24);

		}		
	  if (0.01 < p->Re && p->Re <= 0.1)
		{
			a1 = 0.0;
			b1 = 24.0;
			c1 = 0.0;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d*Re/24);

   		}	
  	  if (0.1 < p->Re && p->Re <= 1.0)
		{
			a1 = 3.69;
			b1 = 22.73;
			c1 = 0.0903;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d)*Re/24;
			
		}		
	  if (1.0 < p->Re && p->Re <= 10.0)
		{
			a1 = 1.222;
			b1 = 29.1667;
			c1 = -3.8889;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d*Re/24);
			
		}		
	  if (10.0 < p->Re && p->Re <= 100.0)
		{
			a1 = 0.6167;
			b1 = 46.5;
			c1 = -116.67;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d*Re/24); 
				
		}		
	  if (100.0 <p->Re && p->Re <= 1000.0)
		{
			a1 = 0.3644;
			b1 = 98.33;
			c1 = -2778;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d)*Re/24;
				
		}		
	  if (1000.0 < p->Re && p->Re <= 5000.0)
		{
			a1 = 0.357;
			b1 = 148.62;
			c1 = -47500.0;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d*Re/24);
			
		}		
	  if (5000.0 < p->Re && p->Re <= 10000.0)
		{
			a1 = 0.46;
			b1 = -490.546;
			c1 = 578700;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d*Re/24);
				
		}		
	  if (10000.0 < p->Re && p->Re <= 50000.0)
		{
			a1 = 0.5191;
			b1 = -1662.5;
			c1 = 5416700.0;
			C_d = a1 + (b1/Re) + (c1/(pow(Re,2)));
			drag = (18.0/C_c * C_d*Re/24);
				
		}	
  */
    printf("drag_force=%g\n", drag);

	
}

/* name particle scalars for post-processing */
DEFINE_DPM_SCALAR_UPDATE(update_info, cell, thread, initialize, p)
{
       cphase_state_t *c = &(p->cphase[0]); /* pointer to continuous phase properties, velocity etc.(dpm.h) */

       cell_t c0 = RP_CELL(&(p->cCell)); /* index of cell in which currently tracked particle is in */
            
       Thread *t0 = RP_THREAD(&(p->cCell)); /* cell thread to which above cell belongs */

       real pp[3] = {0.,0.,0.}; 
       NV_V(pp, =, p->state.pos); 
    
}


  DEFINE_DPM_OUTPUT(Output_file,header,fp,p,thread,plane)
 {
      
    if(header)
    {
        par_fprintf_head(fp,"X-Position, Y-Position, Z-Position, diameter, Cc, Relative velocity, drag\n ");
    }
    if(NULLP(p))
    return;
    par_fprintf(fp,"%d %" int64_fmt " %e %e %e %e %e %e %e \n", P_INJ_ID(P_INJECTION(p)),p->part_id,P_POS(p)[0],P_POS(p)[1],P_POS(p)[2], P_DT(p), C_c, Vrel, drag);
 } 
